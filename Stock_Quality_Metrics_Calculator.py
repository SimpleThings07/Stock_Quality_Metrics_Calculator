# encoding: utf-8

# Copyright (c) Ivan Antunovic - All rights reserved.
# Unintended redistribution can be punishable by law.
# By reading this message, you are automatically consenting to it 
# and you are accepting that the financial data might be incorrect.
# The financial data generated by this script is for informational purposes only 
# and should not be considered as investment advice.
# Use at your own risk.


# Standard Python Modules
import datetime
import os
import json
import math
import requests
import logging

# Data Manipulation Modules
import pandas as pd
import numpy as np

# MS Excel Moduels
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows

# Finance Metrics Modules
import yfinance as yf



# ---------------------- Script Configuration ----------------------

# Setup logging
script_name = os.path.basename(__file__).replace('.py', '')
log_file = f"{script_name}.log"

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s',  # Include log level
                    handlers=[logging.StreamHandler(), logging.FileHandler(log_file)])


# ---------------------- Helper Functions ----------------------

# Output the disclaimer message at the beginning of the script run
def print_disclaimer():
    disclaimer_message = """
    Copyright (c) Ivan Antunovic - All rights reserved.
    Unintended redistribution can be punishable by law.
    By reading this message, you are automatically consenting to it 
    and you are accepting that the financial data might be incorrect.
    The financial data generated by this script is for informational purposes only 
    and should not be considered as investment advice.
    Use at your own risk.
    """
    logging.info(disclaimer_message)

# Print the disclaimer message
print_disclaimer()


# Read the configuration file
def load_config(config_file='Config.json'):
    try:
        with open(config_file, 'r') as f:
            config = json.load(f)
        return config
    except Exception as e:
        logging.error(f"Error loading config file: {e}")
        return None



# Function to fetch annual income statement data (EPS or Net Income) from Alpha Vantage
def fetch_earnings_alpha_vantage(api_key, base_url, ticker, data_type="eps", earnings_period="annual"):

    """
        Function to fetch annual income statement data (EPS or Net Income) from Alpha Vantage as a fallback.

        Parameters:
        - api_key (str): Your Alpha Vantage API key.
        - base_url (str): The base URL for the Alpha Vantage API.
        - ticker (str): The stock ticker symbol (e.g., 'AAPL').
        - data_type (str): The type of data to fetch ('eps' for Earnings per Share, 'net_income' for Net Income).
        - earnings_period (str): The period for which to fetch the data ('annual' or 'quarterly').

        Returns:
        - list: A list of annual earnings data (EPS or Net Income) fetched from Alpha Vantage.
    """

    try:
        # Base URL for Alpha Vantage Income Statement API
        alpha_vantage_url = base_url

        # Initialize the Alpha Vantage function based on the data type
        alpha_vantage_function = None

        # Set the Alpha Vantage function based on the data type
        if data_type == "eps":
            alpha_vantage_function = "EARNINGS"
        elif data_type == "net_income":
            alpha_vantage_function = "INCOME_STATEMENT"


        # Parameters for the API request
        params = {
            "function": alpha_vantage_function,  # Alpha Vantage function to query
            "symbol": ticker,                    # Ticker symbol (e.g., MSFT)
            "apikey": api_key,                   # Your API key
            "datatype": "json"                   # You can choose "map", "json", or "csv"
        }
        
        logging.info(f"Fetching {data_type.upper()} data from Alpha Vantage for {ticker} using function {alpha_vantage_function}.")
        
        # Sending request to the API
        response = requests.get(alpha_vantage_url, params=params)
        
        # HTTP Status Code for successful response
        HTTP_OK = 200

        # Check if response is successful
        if HTTP_OK == response.status_code:

            # Extract the JSON data from the response
            alpha_vantage_data = response.json()

            # -------------- 1. EPS --------------
            if "eps" == data_type:

                # -------------- 1.1 EPS - Annual --------------
                if "annual" == earnings_period:

                    # If the response contains the 'annualEarnings' key, extract the data
                    if 'annualEarnings' in alpha_vantage_data:

                        # Extract the annual earnings data
                        annual_earnings = alpha_vantage_data['annualEarnings']

                        # Extract and convert EPS data from string into floats
                        eps_data = [float(earnings.get("reportedEPS", 0)) for earnings in annual_earnings]
                        logging.info(f"Fetched {data_type.upper()} Data from Alpha Vantage for {ticker} successfully.")

                        return eps_data
                    
                    # If the response does not contain the 'annualEarnings' key
                    else:
                        logging.error(f"No 'annualEarnings' data available for {ticker} on Alpha Vantage.")

                        # Check if the response contains 'Information' key
                        if 'Information' in alpha_vantage_data:
                            alpha_vantage_info = alpha_vantage_data['Information']
                            logging.error(f"Alpha Vantage Response: {alpha_vantage_info}")

                        return None
                
                # -------------- 1.2 EPS - Quarterly --------------
                elif "quarterly" == earnings_period:

                    # If the response contains the 'quarterlyEarnings' key, extract the data
                    if 'quarterlyEarnings' in alpha_vantage_data:

                        # Extract the quarterly earnings data
                        quarterly_earnings = alpha_vantage_data['quarterlyEarnings']

                        # Extract and convert EPS data from string into floats
                        eps_data = [float(earnings.get("reportedEPS", 0)) for earnings in quarterly_earnings]
                        logging.info(f"Fetched {data_type.upper()} Data from Alpha Vantage for {ticker} successfully.")

                        return eps_data
                    
                    # If the response does not contain the 'quarterlyEarnings' key
                    else:
                        logging.error(f"No 'quarterlyEarnings' data available for {ticker} on Alpha Vantage.")

                        # Check if the response contains 'Information' key
                        if 'Information' in alpha_vantage_data:
                            alpha_vantage_info = alpha_vantage_data['Information']
                            logging.error(f"Alpha Vantage Response: {alpha_vantage_info}")

                        return None
                # If the earnings_period is invalid
                else:
                    logging.error(f"Invalid earnings_period '{earnings_period}' specified. Please choose 'annual' or 'quarterly'.")
                    return None

            # -------------- 2. Net Income --------------
            elif "net_income" == data_type:

                # -------------- 2.1 Net Income - Annual --------------
                if "annual" == earnings_period:

                    # If the response contains the 'annualReports' key, extract the data
                    if 'annualReports' in alpha_vantage_data:

                        # Extract the annual reports data
                        annual_reports = alpha_vantage_data['annualReports']

                        # Extract and convert Net Income data from string into floats
                        net_income_data = [float(report.get("netIncome", 0)) for report in annual_reports]
                        
                        logging.info(f"Fetched {data_type.upper()} Data from Alpha Vantage for {ticker} successfully.")

                        return net_income_data

                    # If the response does not contain the 'annualReports' key
                    else:
                        logging.error(f"No 'annualReports' data available for {ticker} on Alpha Vantage.")

                        # Check if the response contains 'Information' key
                        if 'Information' in alpha_vantage_data:
                            alpha_vantage_info = alpha_vantage_data['Information']
                            logging.error(f"Alpha Vantage Response: {alpha_vantage_info}")

                        return None

                # -------------- 2.2 Net Income - Quarterly --------------
                elif "quarterly" == earnings_period:
            
                    # If the response contains the 'quarterlyReports' key, extract the data
                    if 'quarterlyReports' in alpha_vantage_data:

                        # Extract the quarterly reports data
                        quarterly_reports = alpha_vantage_data['quarterlyReports']

                        # Extract and convert Net Income data from string into floats
                        net_income_data = [float(report.get("netIncome", 0)) for report in quarterly_reports]
                        
                        logging.info(f"Fetched {data_type.upper()} Data from Alpha Vantage for {ticker} successfully.")

                        return net_income_data

                    # If the response does not contain the 'quarterlyReports' key
                    else:
                        logging.error(f"No 'quarterlyReports' data available for {ticker} on Alpha Vantage.")

                        # Check if the response contains 'Information' key
                        if 'Information' in alpha_vantage_data:
                            alpha_vantage_info = alpha_vantage_data['Information']
                            logging.error(f"Alpha Vantage Response: {alpha_vantage_info}")

                        return None
                # If the earnings_period is invalid
                else:
                    logging.error(f"Invalid earnings_period '{earnings_period}' specified. Please choose 'annual' or 'quarterly'.")
                    return None


            else:
                logging.error(f"No data available for {ticker} on Alpha Vantage.")
                return None
        else:
            logging.error(f"Error fetching data from Alpha Vantage for {ticker}: {response.status_code}")
            logging.error(f"Negative HTTP response from Alpha Vantage for {ticker}.")
            return None
    
    except Exception as e:
        print(f"Exception occurred: {e}")
        return None



# Function to fetch historical Net Income based on config (Quarterly or Annual)
# If using quarterly data, we will compare net income from the same quarter in different years
# (e.g., Q3 2024 vs Q3 2023).
# If using annual data, we will compare the net income from the entire year for two consecutive years.
# Fetch historical Net Income to calculate YoY earnings growth
def fetch_historical_net_income(stock):

    net_income_data_quart = None
    net_income_data_annual = None

    try:

        # -------------- Quarterly Net Income Data --------------

        # Get quarterly net income data
        income_statement = stock.quarterly_financials.T  # Transpose to have dates as rows

        if 'Net Income' in income_statement.columns:
            net_income = income_statement['Net Income']
        else:
            logging.warning(f"Net Income (quarterly) data not found for {stock.ticker}.")
            return None, None

        # List to hold net income data for the selected periods (quarters)
        quarter_income_data = net_income.tolist()  # Convert to list for easier indexing

        # Ensure there's enough data for comparison (current quarter + same quarter from the previous year)
        if len(quarter_income_data) < 4:  # Need at least 4 quarters to compare
            logging.warning(f"Not enough quarterly income data for {stock.ticker}.")
            return None, None

        # Latest quarter net income (most recent)
        latest_quarter = quarter_income_data[0]
        # Same quarter from the previous year net income (4 quarters ago)
        previous_year_quarter = quarter_income_data[4]

        logging.info(f"Quarterly Latest Net Income (Ticker: {stock.ticker}): {"{:,.2f}".format(latest_quarter)} USD")
        logging.info(f"Quarterly Same Previous Year Net Income (Ticker: {stock.ticker}): {"{:,.2f}".format(previous_year_quarter)} USD")

        net_income_data_quart = [latest_quarter, previous_year_quarter]
        

        # -------------- Annual Net Income Data --------------

        # Get annual net income data
        income_statement = stock.financials.T  # Transpose to have dates as rows

        if 'Net Income' in income_statement.columns:
            net_income = income_statement['Net Income']
        else:
            logging.warning(f"Net Income data (annual) not found for {stock.ticker}.")
            return None, None
        
        # List to hold net income data for the selected periods (quarters)
        annual_income_data = net_income.tolist()  # Convert to list for easier indexing

        # Ensure there are at least two years of annual income data to compute earnings growth
        if len(annual_income_data) < 2:
            logging.warning(f"Not enough data for {stock.ticker} to calculate earnings growth (annual).")
            return None, None

        # Select the latest two years of annual net income data
        latest_year = annual_income_data[0]
        previous_year = annual_income_data[1]

        logging.info(f"Annual Latest Net Income Data (Ticker: {stock.ticker}): {"{:,.2f}".format(latest_year)} USD")
        logging.info(f"Annual Previous Year Net Income Data (Ticker: {stock.ticker}): {"{:,.2f}".format(previous_year)} USD")

        net_income_data_annual = [latest_year, previous_year]


    except Exception as e:
        logging.error(f"Error fetching historical Net Income for {stock.ticker}: {e}")
        return None, None


    return net_income_data_quart, net_income_data_annual



# Function to fetch earnings growth directly from yfinance for comparison
def fetch_earnings_growth_yfinance (stock_info, ticker):

    # Fetch earnings growth directly from yfinance for comparison
    earnings_growth_yfinance_raw = stock_info.get("earningsGrowth", None)
    # Convert to percentage
    earnings_growth_yfinance = earnings_growth_yfinance_raw * 100 if earnings_growth_yfinance_raw is not None else None
    
    if earnings_growth_yfinance:
        logging.info(f"Earnings Growth from yfinance (Ticker: {ticker}): {round(earnings_growth_yfinance, 2)} %")
    else:
        logging.info(f"Earnings Growth from yfinance (Ticker: {ticker}): N/A")

    return earnings_growth_yfinance




# Function to calculate Earnings Growth YoY (Year over Year Growth) using Net Income
def calc_earnings_growth_yoy(stock, ticker, config):

    # Initialize earnings growth YoY calculation values
    earnings_growth_yoy_quart_calc = None

    # Initialize earnings growth YoY calculation values
    earnings_growth_yoy_annual_calc = None

    # Fetch net income values for YoY calculation from financials (current and previous year)
    net_income_data_quart, net_income_data_annual = fetch_historical_net_income(stock)


    # -------------- Quarterly Earnings Growth YoY Calculcation --------------

    # Check if the net income data is null
    if net_income_data_quart is None:
        logging.warning(f"Quarterly Net Income data not found for {ticker}.")
        earnings_growth_yoy_quart_calc = None

    else:

        # Extract net income values for calculation
        current_quart_net_income = net_income_data_quart[0]
        previous_quart_net_income = net_income_data_quart[1]

        # Calculate YoY growth using net income values
        earnings_growth_yoy_quart_calc = calc_yoy(current_quart_net_income, previous_quart_net_income)
        # Calculcate to percentage
        earnings_growth_yoy_quart_calc = earnings_growth_yoy_quart_calc * 100 if earnings_growth_yoy_quart_calc is not None else None

        if earnings_growth_yoy_quart_calc:
            logging.info(f"Calculated Quarterly Earnings Growth YoY (Ticker: {ticker}): {round(earnings_growth_yoy_quart_calc, 2)} %")
        else:
            logging.info(f"Calculated Quarterly Earnings Growth YoY (Ticker: {ticker}): N/A")


    # -------------- Annual Earnings Growth YoY Calculcation ----------------

    # Check if the net income data is null
    if net_income_data_annual is None:
        logging.warning(f"Annual Net Income data not found for {ticker}.")
        earnings_growth_yoy_annual_calc = None

    else:

        # Extract net income values for calculation
        current_annual_net_income = net_income_data_annual[0]
        previous_annual_net_income = net_income_data_annual[1]

        # Calculate YoY growth using net income values
        earnings_growth_yoy_annual_calc = calc_yoy(current_annual_net_income, previous_annual_net_income)
        # Calculcate to percentage
        earnings_growth_yoy_annual_calc = earnings_growth_yoy_annual_calc * 100 if earnings_growth_yoy_annual_calc is not None else None

        if earnings_growth_yoy_annual_calc:
            logging.info(f"Calculated Annual Earnings Growth YoY (Ticker: {ticker}): {round(earnings_growth_yoy_annual_calc, 2)} %")
        else:
            logging.info(f"Calculated Annual Earnings Growth YoY (Ticker: {ticker}): N/A")


    # Initialize earnings growth YoY calculation values
    return earnings_growth_yoy_quart_calc, earnings_growth_yoy_annual_calc



# Function to calculate YoY Growth (Year over Year Growth) using Net Income
# Returns the YoY growth as fraction (e.g., 0.05 for 5% growth)
def calc_yoy (current_value, previous_value):

    # Check if either value is None
    if previous_value is None or current_value is None:
        return None

    # Case when both values are negative
    if current_value < 0 and previous_value < 0:
        yoy = ( (current_value - previous_value) / abs(previous_value) )
        return yoy  # Return negative YoY for both negative values

    # Case when the current value is positive and previous value is negative
    if current_value > 0 and previous_value < 0:
        yoy = ( (current_value - previous_value) / abs(previous_value) )
        return yoy  # Positive YoY when current is positive and previous is negative

    # Case when both values are positive or current is negative and previous is positive
    if current_value < 0 and previous_value > 0:
        yoy = ( (current_value - previous_value) / previous_value )
        return yoy  # Negative YoY when current is negative and previous is positive

    # Normal case for both values being positive
    return ((current_value - previous_value) / previous_value)




def calc_evar(config, stock, ticker, evar_period, evar_source):
    """
    Calculate Earnings Variability (EVAR), i.e. standard deviation, using 'Basic EPS' growth from Yahoo Finance.
    The calculation is done over the period defined by evar_period (e.g., 5 years).
    If there are fewer periods than requested, the function uses the available periods.
    
    Parameters:
        - stock (yf.Ticker): A yfinance Ticker object representing the stock.
        - ticker (str): The stock ticker symbol.
        - evar_period (int): The number of periods (years or quarters) to use for the calculation of EVAR.
        - evar_source (str): The source for the growth calculation: "eps" for EPS growth, "net_income" for Net Income growth.
    
    Returns:
        - float: The calculated Earnings Variability (EVAR) in fractions.
    """
    
    earnings_annual_list = None

    logging.info(f"Calculating EVAR for {ticker} using {evar_source.upper()} growth.")

    # Check if there are enough periods (data points) for EVAR calculation
    if evar_period < 3:
        logging.warning(f"Not enough data to calculate EVAR for {ticker}. At least 3 periods are required.")
        return None
    
    # debugging
    if ticker == "INVX":
        print("Debugging INVX")

    # ToDo: Check the missing Net Income data for ROE calculcation for INVX
    # ToDo: Validate Standard Deviation Calucations for all stocks


    try:
        # Fetch Income Statement from Yahoo Finance
        income_statement_annual = stock.financials.T  # Annual financial data (transpose to get dates as rows)
        # Check if there is data in the income statement
        if income_statement_annual.empty:
            logging.warning(f"No Annual Income Statement data found for {ticker}.")
            return None

        # ------------------- EPS -------------------
        # EVAR Calculation using EPS Growth
        if evar_source == "eps":

            # Check if Basic EPS is available in the income statement
            if 'Basic EPS' in income_statement_annual.columns:

                # Extract the 'Basic EPS' data from the income statement
                eps_basic_annual_list = income_statement_annual['Basic EPS'].tolist()

                # Ensure there's enough earnings data for the specified periods (minimum 3)
                if len(eps_basic_annual_list) < 3:
                    logging.warning(f"Not enough 'Basic EPS' data for {ticker} to calculate EVAR. Need at least 3 earnings periods.")
                    logging.warning(f"Using fallback data source.")

                    # Fallback to Alpha Vantage to fetch EPS data
                    eps_basic_annual_list = fetch_earnings_alpha_vantage (
                        config['AlphaVantage']['API_Key'], 
                        config['AlphaVantage']['Base_URL'], 
                        ticker, 
                        "eps",
                        "annual"
                    )

                    # Check if the fetched EPS list from Alpha Vantage is empty
                    if eps_basic_annual_list is None:
                        logging.error(f"'Basic EPS' data for {ticker} is missing or empty.")
                        return None


                # Remove 'nan' values from the EPS list
                eps_basic_annual_list = [eps for eps in eps_basic_annual_list if not math.isnan(eps)]
                
                # Set the earnings_annual_list to the Basic EPS list
                earnings_annual_list = eps_basic_annual_list

            # If 'Basic EPS' data is not available in the income statement
            else:
                logging.warning(f"Cannot find 'Basic EPS' data for {ticker}.")
                return None
        
        # ------------------- Net Income -------------------
        # EVAR Calculation using Net Income Growth
        elif evar_source == "net_income":

            if 'Net Income' in income_statement_annual.columns:

                # Extract the 'Net Income' data from the income statement
                net_income_annual_list = income_statement_annual['Net Income'].tolist()

                # Ensure there's enough earnings data for the specified periods (minimum 3)
                if len(net_income_annual_list) < 3:
                    logging.warning(f"Not enough 'Net Income' data for {ticker} to calculate EVAR. Need at least 3 earnings periods.")
                    logging.warning(f"Using fallback data source.")

                    # Fallback to Alpha Vantage to fetch Net Income data
                    net_income_annual_list = fetch_earnings_alpha_vantage (
                        config['AlphaVantage']['API_Key'], 
                        config['AlphaVantage']['Base_URL'], 
                        ticker,
                        "net_income",
                        "annual"
                    )

                    # Check if the fetched Net Income list from Alpha Vantage is empty
                    if net_income_annual_list is None:
                        logging.error(f"'Net Income' data for {ticker} from Alpha Vantage is empty or missing.")
                        return None

                # Remove 'nan' values from the Net Income list
                net_income_annual_list = [net_income for net_income in net_income_annual_list if not math.isnan(net_income)]
                
                # Set the earnings_annual_list to the Net Income list
                earnings_annual_list = net_income_annual_list

            else:
                logging.warning(f"Cannot find 'Net Income' data for {ticker}.")
                return None


        # Check if there are enough earnings data points, else use the available data
        available_data_periods = len(earnings_annual_list)
        
        # If available data periods are less than the requested EVAR period
        if available_data_periods < evar_period:
             # Adjust the period to the available data
            earnings_period = available_data_periods
        # If available data periods are equal or more than the requested EVAR period
        else:
            # Use the requested EVAR period
            earnings_period = evar_period

        logging.info(f"Calculacting EVAR over {evar_period} year period for {ticker}.")
        
        # Select the latest 'earnings_period' data points (from the available data)
        earnings_data_period = earnings_annual_list[:earnings_period]

        # Step 1: Calculate EPS Growth Year-on-Year (YoY) for each year
        #   The EPS growth is calculated as:
        #   EPS Growth = (EPS_i - EPS_(i-1)) / EPS_(i-1)
        # Where:
        # - EPS_i = Earnings per share for the current year
        # - EPS_(i-1) = Earnings per share for the previous year
        earnings_growth_yoy = []
        for i in range(0, len(earnings_data_period) - 1):
            earnings_growth = (earnings_data_period[i] - earnings_data_period[i + 1]) / earnings_data_period[i + 1]
            earnings_growth_yoy.append(earnings_growth)

        # Step 2: Calculate the mean of EPS growth
        # The mean of EPS growth is calculated by averaging the EPS growth values (calculated in Step 1)
        #  - EPS_mean = sum(EPS_growth_1, EPS_growth_2, ..., EPS_growth_n) / n
        mean_earnings_growth = np.mean(earnings_growth_yoy)
        
        # Step 3: Calculate the variance of EPS growth (for standard deviation)
        # Variance is calculated as:
        # Variance = ( (EPS_growth_1 - Mean_Growth)^2 + (EPS_growth_2 - Mean_Growth)^2 + ... + (EPS_growth_n - Mean_Growth)^2 ) / (n-1)
        # Where:
        # - EPS_growth_i = EPS growth for the i-th year
        # - Mean_Growth = The average EPS growth (calculated in Step 2)
        # - n = Number of periods (years)
        variance_sum = 0

        for earnings_growth in earnings_growth_yoy:
            # Calculate the sum of squared differences
            variance_sum += (earnings_growth - mean_earnings_growth) ** 2 


        # Calculate the variance by dividing the sum of squared differences by the number of periods (N-1)
        variance = variance_sum / (len(earnings_growth_yoy) - 1)
        
        # -------------------- Step 4: Calculate Earnings Variability (EVAR) --------------------
        # Earnings Variability (EVAR) is the square root of variance (Standard Deviation):
        # - EVAR = sqrt(Variance)
        evar_frac = np.sqrt(variance)

        # Convert EVAR to percentage
        evar_perct = evar_frac * 100
        
        # Log the result
        logging.info(f"Earnings Variability ({evar_source}) for {ticker}: {evar_perct:.2f}%")
        
        # Return EVAR as a fraction
        return evar_frac
    
    except Exception as e:
        logging.error(f"Error calculating EVAR for {ticker}: {e}")
        return None



# Function to calculate P/CF (Price to Cash Flow)
def calculate_pcf(i_stock):

    # Get the latest market price (last closing price)
    market_price = i_stock.history(period="1d")["Close"].iloc[-1] if not i_stock.history(period="1d").empty else None

    # Get the operating cash flow and calculate cash flow per share
    try:
        operating_cash_flow = i_stock.cashflow.loc['Total Cash From Operating Activities'].iloc[0] if 'Total Cash From Operating Activities' in i_stock.cashflow.index else None
        shares_outstanding = stock_info.get("sharesOutstanding", None)
    except Exception as e:
        operating_cash_flow = None
        shares_outstanding = None
        print(f"Error calculating cash flow for {ticker}: {e}")

    if market_price is None or operating_cash_flow is None or shares_outstanding is None or shares_outstanding == 0:
        return None
    cash_flow_per_share = operating_cash_flow / shares_outstanding
    return market_price / cash_flow_per_share if cash_flow_per_share != 0 else None



def get_roe (stock_info, ticker):
    """
        Get Return on Equity (ROE) from Yahoo Finance data.

        Parameters:
            - stock_info (dict): A dictionary containing the stock information.
            - ticker (str): The stock ticker symbol.

        Returns:
            - float: The Return on Equity (ROE) as a percentage
    """
    roe_yfinance = None

    # -------------- ROE from Yahoo Finance --------------
    # Fetch ROE from the Yahoo Finance data
    roe_yfinance_raw = stock_info.get("returnOnEquity", None)

    # If ROE from Yahoo Finance is available
    if roe_yfinance_raw:
        roe_yfinance_percent = roe_yfinance_raw * 100
        logging.info(f"ROE - yFinance (Ticker: {ticker}): {round(roe_yfinance_percent, 2)} %")

        roe_yfinance = roe_yfinance_percent

    # If ROE from Yahoo Finance is not available
    else:
        logging.warning(f"ROE - yFinance (Ticker: {ticker}): N/A")

        roe_yfinance = None

    return roe_yfinance



def calc_roe (stock, ticker, config):
    """
        Calculate Return on Equity (ROE) using Net Income and Shareholder's Equity.

        Parameters:
            - stock (yf.Ticker): A yfinance Ticker object representing the stock.
            - ticker (str): The stock ticker symbol.
            - config (dict): A dictionary containing the configuration settings.

        Returns:
            - float: The calculated Return on Equity (ROE) as a percentage.
    """

    roe_calc = None


    # -------------- 1. Get Net Income from Income Statement --------------

    # Initialize the current annual net income
    current_annual_net_income = None

    # Fetch Net Income and Shareholder's Equity from the Yahoo Finance data
    net_income_data_quart, net_income_data_annual = fetch_historical_net_income(stock)

    # If the net income data is available
    if net_income_data_annual:

        # Extract net income value for calculation
        current_annual_net_income = net_income_data_annual[0]

    # If the net income data from Yahoo Finance is not available
    else:

        logging.warning(f"ROE Calculcation (Ticker: {ticker}): Yahoo Finance Data for Net Income is missing")
        logging.warning(f"Using fallback data source.")
    
        net_income_data_annual_av = fetch_earnings_alpha_vantage (
            config['AlphaVantage']['API_Key'], 
            config['AlphaVantage']['Base_URL'], 
            ticker,
            "net_income",
            "annual"
        )

        # If the net income data from Alpha Vantage is not available
        if net_income_data_annual_av is None:
            logging.error(f"Cannot calculate ROE (Ticker: {ticker}): Data for Net Income is missing")
            return None

        # If the net income data from Alpha Vantage is available
        # Extract net income value for calculation
        current_annual_net_income = net_income_data_annual_av[0]


    # -------------- 2. Get Shareholder's Equity from Balance Sheet --------------

    # Fetch Shareholders' Equity (or Stockholders' Equity) from the balance sheet (annual data)
    balance_sheet = stock.balance_sheet.T  # Transpose to have dates as rows

    # Get "Stockholders' Equity" from the balance sheet data
    stockholders_equity_annual_list = balance_sheet.get('Stockholders Equity', None)

    # If Stockholders' Equity is not available, log a warning and set ROE as None
    if stockholders_equity_annual_list is None:
        logging.error(f"Cannot calculate ROE (Ticker: {ticker}): Data for Shareholder's Equity is missing")
        return None


    # -------------- 3. Calculate ROE --------------

    # If both Net Income and Shareholder's Equity are available, calculate ROE
    if current_annual_net_income and stockholders_equity_annual_list is not None:

        # Calculate ROE using the formula: (Net Income / Shareholder's Equity)
        stockholders_equity_annual = stockholders_equity_annual_list.iloc[0] if stockholders_equity_annual_list is not None else None

        # If both Net Income and Shareholder's Equity are available, calculate ROE
        roe_calc = (current_annual_net_income / stockholders_equity_annual)

        logging.info(f"ROE - Calc (Ticker: {ticker}): {round(roe_calc * 100, 2)} %")

    # If either Net Income or Shareholder's Equity is missing, set ROE as None
    else:
        roe_calc = None
        logging.error(f"ROE - Calc (Ticker: {ticker}): N/A")

    return roe_calc



# Function to generate excel file name
def generate_file_name(config):

    FILE_BASE_NAME = config['Stock_Quality_Excel_Filename']

    date_str = datetime.datetime.now().strftime("%Y-%m-%d")

    file_name = f"{date_str}_{FILE_BASE_NAME}.xlsx"

    # Check if the file already exists, and increment the filename if it does
    file_counter = 1
    while os.path.exists(file_name):
        file_name = f"{date_str}_{FILE_BASE_NAME}_{file_counter}.xlsx"
        file_counter += 1

    return file_name



# Function to save data to excel file
def save_to_excel(data, file_name):

    # Convert the data to a pandas DataFrame
    df = pd.DataFrame.from_dict(data, orient='index')

    # Prepare the workbook
    wb = Workbook()
    ws = wb.active

    # Insert the ETF and Total Investment headers at the top
    ws['A1'] = "ETF"
    ws['B1'] = "S&P SmallCap Quality"
    ws['A2'] = "Total Investment"
    ws['B2'] = "1.000,00 €"

    # Add hyperlink to "S&P SmallCap Quality"
    ws['B1'].hyperlink = "https://www.etf.com/XSHQ"

    # Set column widths for better formatting
    ws.column_dimensions['A'].width = 20
    ws.column_dimensions['B'].width = 30

    # Append the DataFrame to the Excel worksheet
    for r_idx, row in enumerate(dataframe_to_rows(df, index=True, header=True), 4):
        ws.append(row)

    # Save the data to the Excel file
    df.to_excel(file_name)

    # Show the first few rows of the DataFrame
    df.head()



# ---------------------- Main Function ----------------------

# Example usage in the script
if __name__ == "__main__":

    # Load the configuration file
    config = load_config('config.json')
    if not config:
        logging.error("Config file could not be loaded. Exiting script.")
        exit()

    # Get the tickers and weights from the config file
    tickers_and_weights = config.get("Tickers_and_Weights", None)

    # Fetch data using yfinance and include original weights
    stock_data = {}

    # Loop through the tickers and weights
    for ticker_data in tickers_and_weights:

        # Get the ticker and weight
        ticker = ticker_data["ticker"]
        weight = ticker_data["weight"]

        # Fetch the stock data from Yahoo Finance
        stock = yf.Ticker(ticker)
        stock_info = stock.info

        logging.info(f"---------------------- {ticker} ----------------------")

        # -------------- Earnings Growth Fetched Data --------------

        # Earnings Growth YoY from yahoo finance in percentage
        earnings_growth_yoy_yfinance = fetch_earnings_growth_yfinance(stock_info, ticker)

        # -------------- Calculate Earnings Growth YoY --------------
    
        # Calculate Earnings Growth YoY (Year over Year Growth) using Net Income
        earnings_growth_yoy_quart_calc, earnings_growth_yoy_annual_calc = calc_earnings_growth_yoy(stock, ticker, config)

        # -------------- Choose Source FOR Earnings Growth YoY --------------

        earnings_growth_yoy = None

        # YoY Earnings Growth Source shall be determined by the Config file settings
        # Default to "yfinance"
        yoy_earnings_growth_source = config.get("YoY_Earnings_Growth_Source", "yfinance")
            
        # Choose the source based on the config for Methodology of Earnings Growth YoY Calculcation
        #   - "internal_calculation" for calculated YoY growth
        if "internal_calculation" == yoy_earnings_growth_source:

            logging.info(f"Income Statment Type: {config.get("Income_Statement_Type")}")

            # Check income statement type
            #   - "quarterly" for quarterly income data
            if "quarterly" == config.get("Income_Statement_Type"):

                # Use the calculated quarterly earnings growth
                earnings_growth_yoy = earnings_growth_yoy_quart_calc

            #  - "annual" for annual income data
            elif "annual" == config.get("Income_Statement_Type"):

                # Use the calculated annual earnings growth
                earnings_growth_yoy = earnings_growth_yoy_annual_calc

        #   - "yfinance" for yahoo finance data
        elif "yfinance" == yoy_earnings_growth_source:
            earnings_growth_yoy = earnings_growth_yoy_yfinance
        else:
            logging.error("Invalid income statement type in config. Exiting script.")
            exit()


        # -------------- Calculate Earnings Variability (EVAR) --------------

        # Calculate Earnings Variability Earnings Variability is defined as
        # the standard deviation of y-o-y earnings per share growth over the last five fiscal years.
        # The lower the EVAR, the better. A lower EVAR indicates that the company has more stable earnings growth.

        # Calculate EVAR using EPS
        evar_eps = calc_evar (config, stock, ticker, config.get("Earnings_Variability_Period", 5), "eps")
        # Calculate EVAR using Net Income
        evar_net_income = calc_evar (config, stock, ticker, config.get("Earnings_Variability_Period", 5), "net_income")

        # Convert EVAR to percentage
        evar_eps_perc = evar_eps * 100 if evar_eps is not None else None
        evar_net_income_perc = evar_net_income * 100 if evar_net_income is not None else None

        # -------------- Dividend Yield Fetched Data --------------

        # Safe multiplication to handle None values, Convert to percentage
        dividend_yield = stock_info.get("dividendYield", None)
        dividend_yield_percent = dividend_yield * 100 if dividend_yield is not None else None

        if dividend_yield_percent:
            logging.info(f"Dividend Yield (Ticker: {ticker}): {round(dividend_yield_percent, 2)} %")
        else:
            logging.info(f"Dividend Yield (Ticker: {ticker}): N/A")

        # -------------- Fetch ROE --------------

        roe_yfinance = get_roe(stock_info, ticker)
        roe_calc = calc_roe(stock, ticker, config)

        # Convert ROE to percentage
        roe_calc_perc = roe_calc * 100 if roe_calc is not None else None

        # ToDo Calculcate ROE using EPS


        # -------------- Sector and Industry --------------

        # Extract the industry and sector
        sector = stock_info.get("sector", "N/A")
        industry = stock_info.get("industry", "N/A")

        logging.info(f"Sector: {sector}")
        logging.info(f"Industry: {industry}")

        # ToDo: Calculate Pie Chart of Sectors diversification
        #       for the calculcated weightings using your own qualit methodology
        #       We want to be diviersified across sectors.
        #       Diversification is the only free lunch in investing.



        # -------------- Profit Margin --------------
        # Safe multiplication to handle None values, Convert to percentage
        profit_margin = stock_info.get("profitMargins", None)
        profit_margin_percent = profit_margin * 100 if profit_margin is not None else None

        # -------------- P/E Ratio --------------
        # fetch training P/E ratio
        trailingPE = stock_info.get("trailingPE", None)

        # -------------- P/CF --------------
        # Calculate P/CF
        p_cf = calculate_pcf(stock)

        # -------------- Market Cap --------------
        # Convert Market Cap to billions
        market_cap = stock_info.get("marketCap", None)
        market_cap_billions = market_cap / 1e9 if market_cap is not None else None  # Convert Market Cap to billions

        # Store Stock Metrics
        stock_data[ticker] = {
            "Company": stock_info.get("longName", "N/A"),
            "Original Weight": weight,  # Add the original weight for the company
            "P/E (Trailing)":  "{:,.2f}".format(trailingPE) if trailingPE is not None else "N/A",
            "Earnings Growth YoY - Quarterly Calc (%)": "{:,.2f}".format(earnings_growth_yoy_quart_calc) if earnings_growth_yoy_quart_calc is not None else "N/A",
            "Earnings Growth YoY - Annual Calc (%)": "{:,.2f}".format(earnings_growth_yoy_annual_calc) if earnings_growth_yoy_annual_calc is not None else "N/A",
            "Earnings Growth YoY - yFinance Fetched (%)": earnings_growth_yoy_yfinance,
            "EVAR - EPS (%)": "{:,.2f}".format(evar_eps_perc) if evar_eps_perc is not None else "N/A",
            "EVAR - Net Income (%)": "{:,.2f}".format(evar_net_income_perc) if evar_net_income_perc is not None else "N/A",   
            "Dividend Yield (%)": "{:,.2f}".format(dividend_yield_percent) if dividend_yield_percent is not None else "N/A",     
            "ROE - yFinance (%)": "{:,.2f}".format(roe_yfinance) if roe_yfinance is not None else "N/A",
            "ROE - Calc (%)": "{:,.2f}".format(roe_calc_perc) if roe_calc_perc is not None else "N/A",
            "Sector": sector,
            "Industry": industry, 
            "Profit Margin (%)": profit_margin_percent,
            "P/CF": p_cf,
            "P/B": stock_info.get("priceToBook", None),
            "Market Cap (in Billions)": market_cap_billions
        }


    # Generate the file name with today's date
    file_name = generate_file_name(config)

    save_to_excel(stock_data, file_name)
